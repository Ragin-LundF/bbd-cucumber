plugins {
    id "java"
    id "java-library"
    id "maven-publish"
    id "org.springframework.boot" version "2.3.1.RELEASE"
    id "io.spring.dependency-management" version "1.0.9.RELEASE"
    id "org.liquibase.gradle" version "2.0.4"
    id "com.jfrog.bintray" version "1.8.5"
    id "org.sonarqube" version "3.0"
    id "jacoco"
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:2.3.1.RELEASE"
    }
}

dependencies {
    api 'org.apache.httpcomponents:httpclient'
    api 'org.glassfish:javax.json:1.1.4'
    api 'net.javacrumbs.json-unit:json-unit:2.19.0'

    api 'io.cucumber:cucumber-java:6.6.1'
    api 'io.cucumber:cucumber-spring:6.6.1'
    api 'io.cucumber:cucumber-junit:6.6.1'

    api 'javax.validation:validation-api:2.0.1.Final'

    api 'org.apache.commons:commons-text:1.9'

    implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-test'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-csv'

    implementation 'commons-io:commons-io:2.7'
    implementation 'org.apache.commons:commons-lang3:3.11'
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'

    testCompileOnly 'org.projectlombok:lombok:1.18.12'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'
    testImplementation 'com.h2database:h2:1.4.200'
    testImplementation 'junit:junit:4.13'
}

def pomConfig = {
    licenses {
        license {
            name "MIT"
            url "https://opensource.org/licenses/MIT"
            distribution "repo"
        }
    }
    developers {
        developer {
            name "ragin"
        }
    }

    scm {
        url "https://github.com/Ragin-LundF/bbd-cucumber-gherkin-lib"
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifactId "bdd-cucumber-gherkin-lib"
            version "${version}"
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Cucumber library for simpler e2e tests with predefined sentences for API and basic database access')
                root.appendNode('name', 'bdd-cucumber-gherkin-lib')
                root.appendNode('url', 'https://github.com/Ragin-LundF/bbd-cucumber-gherkin-lib')
                root.children().last() + pomConfig
            }
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Ragin-LundF/bbd-cucumber-gherkin-lib")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_TOKEN')
    publications = ['maven']
    dryRun = false //[Default: false] Whether to run this as dry-run, without deploying
    publish = true //[Default: false] Whether version should be auto published after an upload
    override = true //[Default: false] Whether to override version artifacts already published
    filesSpec {
        from 'build/libs'
        into 'standalone_files/level1'
    }
    pkg {
        repo = 'bdd-cucumber-gherkin-lib'
        name = 'bdd-cucumber-gherkin-lib'
        userOrg = user
        licenses = ['MIT']
        vcsUrl = 'https://github.com/Ragin-LundF/bbd-cucumber-gherkin-lib.git'
        labels = ['cucumber', 'bdd', 'gherkin']
        publicDownloadNumbers = true
        version {
            name = "${version}"
            desc = 'Cucumber library for simpler e2e tests with predefined sentences for REST API and basic database access'
            vcsTag = "v${version}"
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
}

jar {
    enabled = true
}

bootJar {
    enabled = false
}

// exclude tests, because they are only examples
test {
    exclude '**'
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

task cucumber(group: "verification") {
    doLast {
        javaexec {
            // Jacoco
            def jacocoAgent = zipTree(configurations.jacocoAgent.singleFile).filter { it.name == "jacocoagent.jar" }.singleFile
            jvmArgs = ["-javaagent:$jacocoAgent=destfile=$buildDir/results/jacoco/cucumber.exec,append=false"]
            // Cucumber execution
            main = "io.cucumber.core.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            String baseReportDir = "build/cucumberReport/"
            args = [
                    '-p', 'pretty',
                    '-p', 'html:'+baseReportDir+'cucumber-html',
                    '-p', 'junit:'+baseReportDir+'cucumber-junit.xml',
                    '-p', 'json:'+baseReportDir+'cucumber-json.json',
                    'src/test/resources/features'
            ]
        }
    }
}

jacocoTestReport.dependsOn(cucumber)